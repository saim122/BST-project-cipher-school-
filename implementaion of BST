class TreeNode {
    int val;
    TreeNode left, right;

    public TreeNode(int item) {
        val = item;
        left = right = null;
    }
}
class BST {
    TreeNode root;

    BST() {
        root = null;
    }

    // Insert a node into the BST
    void insert(int key) {
        root = insertRec(root, key);
    }

    TreeNode insertRec(TreeNode root, int key) {
        if (root == null) {
            root = new TreeNode(key);
            return root;
        }

        if (key < root.val) {
            root.left = insertRec(root.left, key);
        } else if (key > root.val) {
            root.right = insertRec(root.right, key);
        }

        return root;
    }

    // Search for a node in the BST
    TreeNode search(int key) {
        return searchRec(root, key);
    }

    TreeNode searchRec(TreeNode root, int key) {
        if (root == null || root.val == key) {
            return root;
        }

        if (root.val > key) {
            return searchRec(root.left, key);
        }

        return searchRec(root.right, key);
    }

    // Delete a node from the BST
    void delete(int key) {
        root = deleteRec(root, key);
    }

    TreeNode deleteRec(TreeNode root, int key) {
        if (root == null) {
            return root;
        }

        if (key < root.val) {
            root.left = deleteRec(root.left, key);
        } else if (key > root.val) {
            root.right = deleteRec(root.right, key);
        } else {
            // Node with only one child or no child
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            root.val = minValue(root.right);

            // Delete the inorder successor
            root.right = deleteRec(root.right, root.val);
        }

        return root;
    }

    int minValue(TreeNode root) {
        int minv = root.val;
        while (root.left != null) {
            minv = root.left.val;
            root = root.left;
        }
        return minv;
    }
}
public class Main {
    public static void main(String[] args) {
        BST tree = new BST();

        /* Let us create the following BST
              50
           /     \
          30      70
         /  \    /  \
        20   40  60   80 */
        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);

        // Search for a value
        TreeNode result = tree.search(40);
        if (result != null) {
            System.out.println("Found: " + result.val);
        } else {
            System.out.println("Not found");
        }

        // Delete a value
        System.out.println("Delete 20");
        tree.delete(20);

        System.out.println("Delete 30");
        tree.delete(30);

        System.out.println("Delete 50");
        tree.delete(50);
    }
}
